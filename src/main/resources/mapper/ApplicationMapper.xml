<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.blood.bloodservice.dao.ApplicationMapper" >
  <resultMap id="BaseResultMap" type="com.blood.bloodservice.entity.Application" >
    <id column="aid" property="aid" jdbcType="INTEGER" />
    <result column="yid" property="yid" jdbcType="INTEGER" />
    <result column="applyblood" property="applyblood" jdbcType="VARCHAR" />
    <result column="applyamount" property="applyamount" jdbcType="DOUBLE" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="adate" property="adate" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    aid, yid, applyblood, applyamount, state, adate
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.blood.bloodservice.entity.ApplicationExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from application
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from application
    where aid = #{aid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from application
    where aid = #{aid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.blood.bloodservice.entity.ApplicationExample" >
    delete from application
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" useGeneratedKeys="true" keyProperty="aid" parameterType="com.blood.bloodservice.entity.Application" >
    insert into application (aid, yid, applyblood, 
      applyamount, state, adate
      )
    values (#{aid,jdbcType=INTEGER}, #{yid,jdbcType=INTEGER}, #{applyblood,jdbcType=VARCHAR}, 
      #{applyamount,jdbcType=DOUBLE}, #{state,jdbcType=INTEGER}, #{adate,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.blood.bloodservice.entity.Application" >
    insert into application
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="aid != null" >
        aid,
      </if>
      <if test="yid != null" >
        yid,
      </if>
      <if test="applyblood != null" >
        applyblood,
      </if>
      <if test="applyamount != null" >
        applyamount,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="adate != null" >
        adate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="aid != null" >
        #{aid,jdbcType=INTEGER},
      </if>
      <if test="yid != null" >
        #{yid,jdbcType=INTEGER},
      </if>
      <if test="applyblood != null" >
        #{applyblood,jdbcType=VARCHAR},
      </if>
      <if test="applyamount != null" >
        #{applyamount,jdbcType=DOUBLE},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="adate != null" >
        #{adate,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.blood.bloodservice.entity.ApplicationExample" resultType="java.lang.Integer" >
    select count(*) from application
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update application
    <set >
      <if test="record.aid != null" >
        aid = #{record.aid,jdbcType=INTEGER},
      </if>
      <if test="record.yid != null" >
        yid = #{record.yid,jdbcType=INTEGER},
      </if>
      <if test="record.applyblood != null" >
        applyblood = #{record.applyblood,jdbcType=VARCHAR},
      </if>
      <if test="record.applyamount != null" >
        applyamount = #{record.applyamount,jdbcType=DOUBLE},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.adate != null" >
        adate = #{record.adate,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update application
    set aid = #{record.aid,jdbcType=INTEGER},
      yid = #{record.yid,jdbcType=INTEGER},
      applyblood = #{record.applyblood,jdbcType=VARCHAR},
      applyamount = #{record.applyamount,jdbcType=DOUBLE},
      state = #{record.state,jdbcType=INTEGER},
      adate = #{record.adate,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.blood.bloodservice.entity.Application" >
    update application
    <set >
      <if test="yid != null" >
        yid = #{yid,jdbcType=INTEGER},
      </if>
      <if test="applyblood != null" >
        applyblood = #{applyblood,jdbcType=VARCHAR},
      </if>
      <if test="applyamount != null" >
        applyamount = #{applyamount,jdbcType=DOUBLE},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="adate != null" >
        adate = #{adate,jdbcType=VARCHAR},
      </if>
    </set>
    where aid = #{aid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.blood.bloodservice.entity.Application" >
    update application
    set yid = #{yid,jdbcType=INTEGER},
      applyblood = #{applyblood,jdbcType=VARCHAR},
      applyamount = #{applyamount,jdbcType=DOUBLE},
      state = #{state,jdbcType=INTEGER},
      adate = #{adate,jdbcType=VARCHAR}
    where aid = #{aid,jdbcType=INTEGER}
  </update>
</mapper>